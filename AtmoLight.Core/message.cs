// Classes and structures being serialized

// Generated by ProtocolBuffer
// - a pure c# code generation implementation of protocol buffers
// Report bugs to: https://silentorbit.com/protobuf/

// DO NOT EDIT
// This file will be overwritten when CodeGenerator is run.
// To make custom modifications, edit the .proto file and add //:external before the message line
// then write the code and the changes in a separate file.
using System;
using System.Collections.Generic;

namespace Proto
{
    public partial class HyperionRequest
    {
        public enum Command
        {
            COLOR = 1,
            IMAGE = 2,
            CLEAR = 3,
            CLEARALL = 4,
        }

        /// <summary> command specification</summary>
        public Proto.HyperionRequest.Command command { get; set; }

        public override string ToString()
        {
            return "command: " + command + ", ";
        }
        // ProtocolBuffers wire field id
        public const int commandFieldID = 1;
    }

    public partial class ColorRequest
    {
        public Proto.ColorRequest ColorRequestField { get; set; }

        /// <summary> priority to use when setting the color</summary>
        public int Priority { get; set; }

        /// <summary> integer value containing the rgb color (0x00RRGGBB)</summary>
        public int RgbColor { get; set; }

        /// <summary> duration of the request (negative results in infinite)</summary>
        public int Duration { get; set; }

        public override string ToString()
        {
            return (ColorRequestField != null ? "ColorRequestField: " + ColorRequestField + ", ":  "") +
            "Priority: " + Priority + ", " +
            "RgbColor: " + RgbColor + ", " +
            "Duration: " + Duration + ", ";
        }
        // ProtocolBuffers wire field id
        public const int ColorRequestFieldFieldID = 10;
        public const int PriorityFieldID = 1;
        public const int RgbColorFieldID = 2;
        public const int DurationFieldID = 3;
    }

    public partial class ImageRequest
    {
        public Proto.ImageRequest ImageRequestField { get; set; }

        /// <summary> priority to use when setting the image</summary>
        public int Priority { get; set; }

        /// <summary> width of the image</summary>
        public int Imagewidth { get; set; }

        /// <summary> height of the image</summary>
        public int Imageheight { get; set; }

        /// <summary> image data</summary>
        public byte[] Imagedata { get; set; }

        /// <summary> duration of the request (negative results in infinite)</summary>
        public int Duration { get; set; }

        public override string ToString()
        {
            return (ImageRequestField != null ? "ImageRequestField: " + ImageRequestField + ", ":  "") +
            "Priority: " + Priority + ", " +
            "Imagewidth: " + Imagewidth + ", " +
            "Imageheight: " + Imageheight + ", " +
            "Imagedata: " + "[" + (Imagedata != null ? BitConverter.ToString(Imagedata) : "") + "]" + ", " +
            "Duration: " + Duration + ", ";
        }
        // ProtocolBuffers wire field id
        public const int ImageRequestFieldFieldID = 11;
        public const int PriorityFieldID = 1;
        public const int ImagewidthFieldID = 2;
        public const int ImageheightFieldID = 3;
        public const int ImagedataFieldID = 4;
        public const int DurationFieldID = 5;
    }

    public partial class ClearRequest
    {
        public Proto.ClearRequest ClearRequestField { get; set; }

        /// <summary> priority which need to be cleared</summary>
        public int Priority { get; set; }

        public override string ToString()
        {
            return (ClearRequestField != null ? "ClearRequestField: " + ClearRequestField + ", ":  "") +
            "Priority: " + Priority + ", ";
        }
        // ProtocolBuffers wire field id
        public const int ClearRequestFieldFieldID = 12;
        public const int PriorityFieldID = 1;
    }

    public partial class HyperionReply
    {
        /// <summary> flag indication success or failure</summary>
        public bool Success { get; set; }

        /// <summary> string indicating the reason for failure (if applicable)</summary>
        public string Error { get; set; }

        public override string ToString()
        {
            return "Success: " + Success + ", " +
            (Error != null ? "Error: " + Error + ", ":  "");
        }
        // ProtocolBuffers wire field id
        public const int SuccessFieldID = 1;
        public const int ErrorFieldID = 2;
    }

}
